// Generated by CodiumAI

import { describe, expect, it } from "vitest";

import NotEmptyError from "../../../src/error/not-empty-error";

describe("notEmptyError", () => {
    it("should be able to instantiate with a message", () => {
        expect.assertions(2);

        const errorMessage = "Directory is not empty";
        const error = new NotEmptyError(errorMessage);

        expect(error).toBeInstanceOf(NotEmptyError);
        expect(error.message).toBe(`ENOTEMPTY: Directory not empty, ${errorMessage}`);
    });

    it("should inherit from Error class", () => {
        expect.assertions(1);

        const error = new NotEmptyError("Directory is not empty");

        expect(error).toBeInstanceOf(Error);
    });

    it("should have a code property", () => {
        expect.assertions(1);

        const error = new NotEmptyError("Directory is not empty");

        expect(error.code).toBe("ENOTEMPTY");
    });

    it("should be able to instantiate with an empty message", () => {
        expect.assertions(2);

        const error = new NotEmptyError("");

        expect(error).toBeInstanceOf(NotEmptyError);
        expect(error.message).toBe("ENOTEMPTY: Directory not empty, ");
    });

    it("should not be able to overwrite the name property", () => {
        expect.assertions(1);

        const error = new NotEmptyError("Directory is not empty");

        expect(() => {
            error.name = "CustomName";
        }).toThrow("Cannot overwrite name of NotEmptyError");
    });

    it("should be read-only when accessing the code property", () => {
        expect.assertions(1);

        const error = new NotEmptyError("Invalid operation");

        expect(() => {
            error.code = "ENOTEMPTY";
        }).toThrow("Cannot overwrite code ENOTEMPTY");
    });
});
